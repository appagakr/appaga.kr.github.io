<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Appaga</title>
    <link href="https://appaga.kr/feed.xml" rel="self" />
    <link href="https://appaga.kr" />
    <updated>2022-04-03T09:10:45+09:00</updated>
    <author>
        <name>appaga</name>
    </author>
    <id>https://appaga.kr</id>

    <entry>
        <title>Apache 2.x + Tomcat 설정</title>
        <author>
            <name>appaga</name>
        </author>
        <link href="https://appaga.kr/apache001/"/>
        <id>https://appaga.kr/apache001/</id>

        <updated>2022-04-03T09:10:45+09:00</updated>
            <summary>
                <![CDATA[
                    apache 2.x에서 SSL 및 tomcat proxy 설정 http://로 접속을 시도하면 https://로 전환되도록 설정한다. &lt;VirtualHost *:80&gt; ServerName appaga.kr Redirect permanent / https://appaga.kr/ &lt;/VirtualHost&gt; RewriteEngine 으로 하는 방법 &lt;VirtualHost *:80&gt; ServerName appaga.kr RewriteEngine On RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L] &lt;/VirtualHost&gt; 443 포트 SSL 설정 발급받은&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>apache 2.x에서 SSL 및 tomcat proxy 설정</p>
<h2 id="80-포트를-443-포트로-리다이렉트">80 포트를 443 포트로 리다이렉트</h2>
<p><code>http://</code>로 접속을 시도하면 <code>https://</code>로 전환되도록 설정한다.</p>
<h3 id="redirect-속성으로-하는-방법"><code>Redirect</code> 속성으로 하는 방법</h3>
<pre><code class="language-xml">&lt;VirtualHost *:80&gt;
ServerName appaga.kr
Redirect permanent / https://appaga.kr/
&lt;/VirtualHost&gt;
</code></pre>
<h3 id="rewriteengine-으로-하는-방법"><code>RewriteEngine</code> 으로 하는 방법</h3>
<pre><code class="language-xml">&lt;VirtualHost *:80&gt;
ServerName appaga.kr
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
&lt;/VirtualHost&gt;
</code></pre>
<h2 id="443-포트-ssl-설정">443 포트 SSL 설정</h2>
<p>발급받은 SSL 인증서 파일들을 <code>/etc/httpd/ssl/2020/</code> 폴더에 저장하여 사용한다.</p>
<p>tomcat은 8080 포트로 실행 중이며 proxy를 이용하여 모든 요청을 tomcat으로 전달 시킨다.</p>
<p>만약 tomcat으로 proxy 하지 않도록 하려면 <code>ProxyPass /resources !</code> 처럼 느낌표 <code>!</code>로 proxy에서 예외처리 한다.</p>
<pre><code class="language-xml">Listen 443 https
SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout  300

SSLRandomSeed startup file:///dev/urandom  256
SSLRandomSeed connect builtin

SSLCryptoDevice builtin

&lt;VirtualHost *:443&gt;
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    ServerName appaga.kr

    ErrorLog logs/error.log
    CustomLog logs/access.log combined

    SSLEngine on
    SSLProtocol all -SSLv2 -SSLv3
    SSLCipherSuite ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:!RC4:HIGH:!MD5:!aNULL:!EDH

    SSLCertificateFile      /etc/httpd/ssl/2020/appaga.kr.crt
    SSLCertificateKeyFile   /etc/httpd/ssl/2020/appaga.kr.key
    SSLCACertificateFile /etc/httpd/ssl/2020/appaga.kr.crt

    ProxyRequests Off
    ProxyPreserveHost On

    &lt;Proxy *&gt;
        Order deny,allow
        Allow from all
    &lt;/Proxy&gt;

    ProxyPass /resources !
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/
    &lt;Location /&gt;
        Order allow,deny
        Allow from all
    &lt;/Location&gt;

&lt;/VirtualHost&gt;
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>JavaScript Obfuscator Tool: obfuscator.io</title>
        <author>
            <name>appaga</name>
        </author>
        <link href="https://appaga.kr/javascript-obfuscator-tool-obfuscatorio/"/>
        <id>https://appaga.kr/javascript-obfuscator-tool-obfuscatorio/</id>

        <updated>2021-10-07T13:33:04+09:00</updated>
            <summary>
                <![CDATA[
                    자바스크립트 난독화 자바스크립트 난독화가 필요하여 테스트 하다가 오픈소스 obfuscator.io 툴을 이용하여 실무에 적용하였다. 온라인으로도 가능하고 설치하여 사용도 가능하다. 간단한 옵션 설정으로 난독화가 가능하고 브라우저 디버깅 모드를 작동하지 않도록 할 수 있어 유용하게 사용 중이다. 설치는 프로젝트의 설치안내 페이지를 따라서 진행하면 간단히 가능하다. 설치 후에 실행은&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="자바스크립트-난독화">자바스크립트 난독화</h1>
<p>자바스크립트 난독화가 필요하여 테스트 하다가 오픈소스 <a href="https://obfuscator.io/">obfuscator.io</a> 툴을 이용하여 실무에 적용하였다.</p>
<p>온라인으로도 가능하고 설치하여 사용도 가능하다.</p>
<p>간단한 옵션 설정으로 난독화가 가능하고 브라우저 디버깅 모드를 작동하지 않도록 할 수 있어 유용하게 사용 중이다.</p>
<h2 id="로컬-설치">로컬 설치</h2>
<p>설치는  프로젝트의 <a href="https://github.com/javascript-obfuscator/javascript-obfuscator">설치안내</a> 페이지를 따라서 진행하면 간단히 가능하다.</p>
<h2 id="로컬-실행">로컬 실행</h2>
<p>설치 후에 실행은 <code>npm</code> 가이드만 나와있는데, <code>npm</code>을 제대로 사용할 지 모르는 상태여서 <code>sh</code>로 실행하고 있다.</p>
<ul>
<li><code>CMD</code>: 실행파일 경로이다.</li>
<li><code>OUT_OPT</code>: 옵션파일 경로이다.</li>
<li><code>SRC_DIR</code>의 js 파일 <code>common.js</code>를 <code>OUT_DIR</code>에 난독화하여 저장하고 있다.</li>
</ul>
<pre><code class="language-shell">#!/bin/sh
CMD=/home/appagakr/js-obfuscator/node_modules/javascript-obfuscator/bin/javascript-obfuscator
SRC_DIR=/var/www/html/
OUT_DIR=/home/appagakr/js-encode
OUT_OPT=&quot;--config /home/appagakr/appagakr_conf.json&quot;
$CMD $SRC_DIR/js/common.js --output $OUT_DIR/common.js $OUT_OPT
</code></pre>
<p>난독화 옵션 파일 <code>appagakr_conf.json</code>은 Low obfuscation, High performance 옵션에서 디버깅 불가, 콘솔 출력 불가만 <code>true</code>로 하여 사용중이다.</p>
<pre><code class="language-json">{
        &quot;compact&quot;: true,
        &quot;controlFlowFlattening&quot;: false,
        &quot;deadCodeInjection&quot;: true,
        &quot;debugProtection&quot;: true,
        &quot;debugProtectionInterval&quot;: false,
        &quot;disableConsoleOutput&quot;: true,
        &quot;identifierNamesGenerator&quot;: &quot;hexadecimal&quot;,
        &quot;log&quot;: false,
        &quot;numbersToExpressions&quot;: false,
        &quot;renameGlobals&quot;: false,
        &quot;rotateStringArray&quot;: true,
        &quot;selfDefending&quot;: false,
        &quot;shuffleStringArray&quot;: true,
        &quot;simplify&quot;: true,
        &quot;splitStrings&quot;: false,
        &quot;stringArray&quot;: true,
        &quot;stringArrayEncoding&quot;: [],
        &quot;stringArrayIndexShift&quot;: true,
        &quot;stringArrayWrappersCount&quot;: 1,
        &quot;stringArrayWrappersChainedCalls&quot;: true,
        &quot;stringArrayWrappersParametersMaxCount&quot;: 2,
        &quot;stringArrayWrappersType&quot;: &quot;variable&quot;,
        &quot;stringArrayThreshold&quot;: 0.75,
        &quot;unicodeEscapeSequence&quot;: false
}
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>mongoDB 무료 계정</title>
        <author>
            <name>appaga</name>
        </author>
        <link href="https://appaga.kr/mongodb-muryo-gyejeong-2/"/>
        <id>https://appaga.kr/mongodb-muryo-gyejeong-2/</id>

        <updated>2021-10-07T13:37:51+09:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://appaga.kr/media/posts/2/mongodb001-2.jpg" alt="" />
                    www.mongodb.com에서 512M 용량의 free DB를 만든다. 회원가입을 하고 cluster를 만든다. 안내에 따라 진행하면 되니 별도의 사전 지식을 필요로 하지 않는다. DB접속 계정은 패스워드 기반으로 생성한다. 인증서 기반으로 생성할 수도 있다. 접속가능 IP에 현재 사용중인 IP만 추가한다. 물론, 모든 IP 접속허용도 가능하다. 샘플 데이터(약 320M 정도)를&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://appaga.kr/media/posts/2/mongodb001-2.jpg" alt="" />
                <p><a href="https://www.mongodb.com/">www.mongodb.com</a>에서 512M 용량의 free DB를 만든다.
회원가입을 하고 cluster를 만든다.
안내에 따라 진행하면 되니 별도의 사전 지식을 필요로 하지 않는다.</p>
<p>DB접속 계정은 패스워드 기반으로 생성한다.
인증서 기반으로 생성할 수도 있다.</p>
<p>접속가능 IP에 현재 사용중인 IP만 추가한다.
물론, 모든 IP 접속허용도 가능하다.</p>
<p>샘플 데이터(약 320M 정도)를 로드해서 테스트에 사용한다.
버튼 클릭만으로 샘플 데이터는 로드된다.</p>
<p><a href="https://www.mongodb.com/products/compass">MongoDB Compass</a>를 설치하여 샘플 데이터를 조회해본다.</p>
<p>연결문자는 <code>mongodb+srv://DB계정:계정암호@cluster0.mongodb.net/test</code> 형식이다.</p>
<p><figure class="post__image"><img loading="lazy" src="https://appaga.kr/media/posts/2/mongodb001.jpg" sizes="(max-width: 48em) 100vw, 768px" srcset="https://appaga.kr/media/posts/2/responsive/mongodb001-xs.jpg 300w ,https://appaga.kr/media/posts/2/responsive/mongodb001-sm.jpg 480w ,https://appaga.kr/media/posts/2/responsive/mongodb001-md.jpg 768w ,https://appaga.kr/media/posts/2/responsive/mongodb001-lg.jpg 1024w ,https://appaga.kr/media/posts/2/responsive/mongodb001-xl.jpg 1360w ,https://appaga.kr/media/posts/2/responsive/mongodb001-2xl.jpg 1600w"  alt="MongoDB Compass" width="1010" height="613" /></figure></p>

            ]]>
        </content>
    </entry>
</feed>
