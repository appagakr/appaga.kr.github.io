<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://appaga.kr</link>
    <atom:link href="https://appaga.kr/feed.xml" rel="self" type="application/rss+xml" />
    <description>APPAGA.KR DevOps</description>
    <language>ko-KR</language>
    <pubDate>Sat, 16 Apr 2022 17:32:36 +0900</pubDate>
    <lastBuildDate>Sat, 16 Apr 2022 17:32:36 +0900</lastBuildDate>

    <item>
      <title>Apache 2.x 보안설정</title>
      <link>https://appaga.kr/blog/was/was002.html</link>
      <pubDate>Tue, 12 Apr 2022 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/was/was002.html</guid>
      <description>&amp;lt;p&amp;gt;apache 2.x에서 보안을 위한 설정을 알아본다.&amp;lt;br /&amp;gt;
응답 header에 서버 정보가 자세히 표시되는 것을 &amp;lt;code&amp;gt;ServerTokens&amp;lt;/code&amp;gt;을 이용하여 최소화 할 수 있다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;사용하지도 않는 메소드를 차단한다. 주로 사용하는 &amp;lt;code&amp;gt;GET&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;POST&amp;lt;/code&amp;gt;만 남겨놓고 나머지는 제거한다.&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt; 명령으로 최종 적용된 상태를 확인할 수 있다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;서버정보 숨기기&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;ServerTokens&amp;lt;/code&amp;gt; 지시자로 응답 header에 표시되는 서버 정보를 최소화 한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;설정을 안한 상태에서는 아래와 같이 서버의 정보가 꽤나 자세히 제공된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/was/was001.jpg&amp;quot; alt=&amp;quot;img01&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;서버 정보 표시를 최소 정보인 &amp;lt;code&amp;gt;Apache&amp;lt;/code&amp;gt;만 표시되도록 설정을 추가 한다.&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;/etc/httpd/conf/httpd.conf&amp;lt;/code&amp;gt;에 추가 한다.&amp;lt;br /&amp;gt;
하단에 표시되는 아파치 정보를 제거하기 위해서 &amp;lt;code&amp;gt;ServerSignature&amp;lt;/code&amp;gt;를 &amp;lt;code&amp;gt;Off&amp;lt;/code&amp;gt;로 설정한다.&amp;lt;br /&amp;gt;
디폴트가 &amp;lt;code&amp;gt;Off&amp;lt;/code&amp;gt;이기 때문에 설정을 안해줘도 된다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;ServerTokens Prod
ServerSignature Off
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;아파치 서버 재기동 한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-sh&amp;quot;&amp;gt;]# service httpd restart
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/was/was001_1.jpg&amp;quot; alt=&amp;quot;img01&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;GET, POST 메소드만 허용하기&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;특별한 설정을 하지 않은 경우에는 아래와 같이 &amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt; 명령으로 테스트 하면&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;Allow&amp;lt;/code&amp;gt;에 &amp;lt;code&amp;gt;GET&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;HEAD&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;POST&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;PUT&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;DELETE&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;TRACE&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;OPTIONS&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;PATCH&amp;lt;/code&amp;gt; 모든 메소드가 허락된 것을 확인할 수 있다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-sh&amp;quot;&amp;gt;]# curl -v -X OPTIONS https://appaga.kr/
* About to connect() to appaga.kr port 443 (#0)
*   Trying 127.0.0.1...
* Connected to appaga.kr (127.0.0.1) port 443 (#0)
&amp;amp;gt; OPTIONS / HTTP/1.1
&amp;amp;gt; User-Agent: curl/7.29.0
&amp;amp;gt; Host: appaga.kr
&amp;amp;gt; Accept: */*
&amp;amp;gt;
&amp;amp;lt; HTTP/1.1 200
&amp;amp;lt; Date: Tue, 12 Apr 2022 13:44:41 GMT
&amp;amp;lt; Server: Apache/2.4.6 (CentOS) OpenSSL/1.0.2k-fips
&amp;amp;lt; Allow: GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, PATCH
&amp;amp;lt; Content-Length: 0
&amp;amp;lt; Set-Cookie: JSESSIONID=C27E22F18378DE344B761DCFB8DD971C; Path=/; Secure; HttpOnly; SameSite=None
&amp;amp;lt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;아파치의 &amp;lt;code&amp;gt;vhost.conf&amp;lt;/code&amp;gt;나 &amp;lt;code&amp;gt;ssl.conf&amp;lt;/code&amp;gt;에 &amp;lt;code&amp;gt;GET&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;POST&amp;lt;/code&amp;gt; 메소드 외에는 제거하는 아래와 같은 설정을 추가한다.&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;Directory&amp;lt;/code&amp;gt; 지시자를 사용하여도 된다.&amp;lt;br /&amp;gt;
나의 경우에는 &amp;lt;code&amp;gt;Location&amp;lt;/code&amp;gt; 지시자를 사용 중에 있어 그대로 이용했다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;&amp;amp;lt;Location /&amp;amp;gt;
        &amp;amp;lt;LimitExcept GET POST&amp;amp;gt;
                Order deny,allow
                Deny from all
        &amp;amp;lt;/LimitExcept&amp;amp;gt;
&amp;amp;lt;/Location&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;아파치 서버 재기동 후에 동일한 &amp;lt;code&amp;gt;curl&amp;lt;/code&amp;gt; 명령을 실행하면 이제는 &amp;lt;code&amp;gt;Forbidden&amp;lt;/code&amp;gt; 결과로 응답된다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;]# curl -v -X OPTIONS https://appaga.kr/
&amp;amp;gt; OPTIONS / HTTP/1.1
&amp;amp;gt; User-Agent: curl/7.29.0
&amp;amp;gt; Host: gcfwc.ggwf.or.kr
&amp;amp;gt; Accept: */*
&amp;amp;gt;
&amp;amp;lt; HTTP/1.1 403 Forbidden
&amp;amp;lt; Date: Tue, 12 Apr 2022 14:07:16 GMT
&amp;amp;lt; Server: Apache
&amp;amp;lt; Content-Length: 202
&amp;amp;lt; Content-Type: text/html; charset=iso-8859-1
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
</description>
    </item><item>
      <title>Apache 2.x + Tomcat 설정</title>
      <link>https://appaga.kr/blog/was/was001.html</link>
      <pubDate>Fri, 1 Apr 2022 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/was/was001.html</guid>
      <description>&amp;lt;p&amp;gt;apache 2.x에서 SSL 설정과 tomcat으로 proxy 하는 아파치 설정이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;80&amp;lt;/code&amp;gt; 포트로 접속을 시도하면 &amp;lt;code&amp;gt;443&amp;lt;/code&amp;gt; 포트로 리다이렉트 하도록 설정하여 언제나 &amp;lt;code&amp;gt;https://&amp;lt;/code&amp;gt; 프로토콜로 제공되도록 한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;tomcat으로 proxy하여 원하는 url을 tomcat에서 제공하도록 설정한다.&amp;lt;br /&amp;gt;
만약 tomcat으로 proxy 하지 않도록 하려면 느낌표 &amp;lt;code&amp;gt;!&amp;lt;/code&amp;gt;로 proxy에서 예외처리 한다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;80 포트를 443 포트로 리다이렉트&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;http://&amp;lt;/code&amp;gt;로 접속을 시도하면 &amp;lt;code&amp;gt;https://&amp;lt;/code&amp;gt;로 전환되도록 설정한다.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;&amp;lt;code&amp;gt;Redirect&amp;lt;/code&amp;gt; 속성으로 하는 방법&amp;lt;/h3&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;&amp;amp;lt;VirtualHost *:80&amp;amp;gt;
ServerName appaga.kr
Redirect permanent / https://appaga.kr/
&amp;amp;lt;/VirtualHost&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;&amp;lt;code&amp;gt;RewriteEngine&amp;lt;/code&amp;gt; 으로 하는 방법&amp;lt;/h3&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;&amp;amp;lt;VirtualHost *:80&amp;amp;gt;
ServerName appaga.kr
RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
&amp;amp;lt;/VirtualHost&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;443 포트 SSL 설정&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;발급받은 SSL 인증서 파일들을 &amp;lt;code&amp;gt;/etc/httpd/ssl/2020/&amp;lt;/code&amp;gt; 폴더에 저장하여 사용한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;tomcat은 8080 포트로 실행 중이며 proxy를 이용하여 모든 요청을 tomcat으로 전달 시킨다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;만약 tomcat으로 proxy 하지 않도록 하려면 &amp;lt;code&amp;gt;ProxyPass /resources !&amp;lt;/code&amp;gt; 처럼 느낌표 &amp;lt;code&amp;gt;!&amp;lt;/code&amp;gt;로 proxy에서 예외처리 한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;Listen 443 https
SSLPassPhraseDialog exec:/usr/libexec/httpd-ssl-pass-dialog
SSLSessionCache         shmcb:/run/httpd/sslcache(512000)
SSLSessionCacheTimeout  300

SSLRandomSeed startup file:///dev/urandom  256
SSLRandomSeed connect builtin

SSLCryptoDevice builtin

&amp;amp;lt;VirtualHost *:443&amp;amp;gt;
	ServerAdmin webmaster@localhost
	DocumentRoot /var/www/html
	ServerName appaga.kr

	ErrorLog logs/error.log
	CustomLog logs/access.log combined

	SSLEngine on
	SSLProtocol all -SSLv2 -SSLv3
	SSLCipherSuite ECDHE-RSA-AES128-SHA256:AES128-GCM-SHA256:!RC4:HIGH:!MD5:!aNULL:!EDH

	SSLCertificateFile      /etc/httpd/ssl/2020/appaga.kr.crt
	SSLCertificateKeyFile   /etc/httpd/ssl/2020/appaga.kr.key
	SSLCACertificateFile /etc/httpd/ssl/2020/appaga.kr.crt

	ProxyRequests Off
	ProxyPreserveHost On

	&amp;amp;lt;Proxy *&amp;amp;gt;
		Order deny,allow
		Allow from all
	&amp;amp;lt;/Proxy&amp;amp;gt;

	ProxyPass /resources !
	ProxyPass / http://127.0.0.1:8080/
	ProxyPassReverse / http://127.0.0.1:8080/
	&amp;amp;lt;Location /&amp;amp;gt;
		Order allow,deny
		Allow from all
	&amp;amp;lt;/Location&amp;amp;gt;

&amp;amp;lt;/VirtualHost&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
</description>
    </item><item>
      <title>code prettify</title>
      <link>https://appaga.kr/blog/post/post0001.html</link>
      <pubDate>Thu, 1 Apr 2021 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/post/post0001.html</guid>
      <description>
&amp;lt;p&amp;gt;code prettify&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;amp;gt;를 사용한다.&amp;lt;/p&amp;gt;

&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/googlearchive/code-prettify&amp;quot;&amp;gt;https://github.com/googlearchive/code-prettify&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;

&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;

&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
&amp;lt;code&amp;gt;
package org.jbake;

public class Oven {
	public static void main(String[] args) {
		System.out.print(&amp;quot;Baking!&amp;quot;);
  }
}
&amp;lt;/code&amp;gt;
&amp;lt;/pre&amp;gt;
</description>
    </item><item>
      <title>JavaScript Obfuscator Tool: obfuscator.io</title>
      <link>https://appaga.kr/blog/js/obfuscator_io.html</link>
      <pubDate>Thu, 1 Oct 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/js/obfuscator_io.html</guid>
      <description>&amp;lt;h1&amp;gt;자바스크립트 난독화&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;자바스크립트 난독화가 필요하여 테스트 하다가 오픈소스 &amp;lt;a href=&amp;quot;https://obfuscator.io/&amp;quot;&amp;gt;obfuscator.io&amp;lt;/a&amp;gt; 툴을 이용하여 실무에 적용하였다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;온라인으로도 가능하고 설치하여 사용도 가능하다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;간단한 옵션 설정으로 난독화가 가능하고 브라우저 디버깅 모드를 작동하지 않도록 할 수 있어 유용하게 사용 중이다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;로컬 설치&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;설치는  프로젝트의 &amp;lt;a href=&amp;quot;https://github.com/javascript-obfuscator/javascript-obfuscator&amp;quot;&amp;gt;설치안내&amp;lt;/a&amp;gt; 페이지를 따라서 진행하면 간단히 가능하다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;로컬 실행&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;설치 후에 실행은 &amp;lt;code&amp;gt;npm&amp;lt;/code&amp;gt; 가이드만 나와있는데, &amp;lt;code&amp;gt;npm&amp;lt;/code&amp;gt;을 제대로 사용할 지 모르는 상태여서 &amp;lt;code&amp;gt;sh&amp;lt;/code&amp;gt;로 실행하고 있다.&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;CMD&amp;lt;/code&amp;gt;: 실행파일 경로이다.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;OUT_OPT&amp;lt;/code&amp;gt;: 옵션파일 경로이다.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;SRC_DIR&amp;lt;/code&amp;gt;의 js 파일 &amp;lt;code&amp;gt;common.js&amp;lt;/code&amp;gt;를 &amp;lt;code&amp;gt;OUT_DIR&amp;lt;/code&amp;gt;에 난독화하여 저장하고 있다.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-shell&amp;quot;&amp;gt;#!/bin/sh
CMD=/home/appagakr/js-obfuscator/node_modules/javascript-obfuscator/bin/javascript-obfuscator
SRC_DIR=/var/www/html/
OUT_DIR=/home/appagakr/js-encode
OUT_OPT=&amp;amp;quot;--config /home/appagakr/appagakr_conf.json&amp;amp;quot;
$CMD $SRC_DIR/js/common.js --output $OUT_DIR/common.js $OUT_OPT
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;난독화 옵션 파일 &amp;lt;code&amp;gt;appagakr_conf.json&amp;lt;/code&amp;gt;은 Low obfuscation, High performance 옵션에서 디버깅 불가, 콘솔 출력 불가만 &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;로 하여 사용중이다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-js&amp;quot;&amp;gt;{
        &amp;amp;quot;compact&amp;amp;quot;: true,
        &amp;amp;quot;controlFlowFlattening&amp;amp;quot;: false,
        &amp;amp;quot;deadCodeInjection&amp;amp;quot;: true,
        &amp;amp;quot;debugProtection&amp;amp;quot;: true,
        &amp;amp;quot;debugProtectionInterval&amp;amp;quot;: false,
        &amp;amp;quot;disableConsoleOutput&amp;amp;quot;: true,
        &amp;amp;quot;identifierNamesGenerator&amp;amp;quot;: &amp;amp;quot;hexadecimal&amp;amp;quot;,
        &amp;amp;quot;log&amp;amp;quot;: false,
        &amp;amp;quot;numbersToExpressions&amp;amp;quot;: false,
        &amp;amp;quot;renameGlobals&amp;amp;quot;: false,
        &amp;amp;quot;rotateStringArray&amp;amp;quot;: true,
        &amp;amp;quot;selfDefending&amp;amp;quot;: false,
        &amp;amp;quot;shuffleStringArray&amp;amp;quot;: true,
        &amp;amp;quot;simplify&amp;amp;quot;: true,
        &amp;amp;quot;splitStrings&amp;amp;quot;: false,
        &amp;amp;quot;stringArray&amp;amp;quot;: true,
        &amp;amp;quot;stringArrayEncoding&amp;amp;quot;: [],
        &amp;amp;quot;stringArrayIndexShift&amp;amp;quot;: true,
        &amp;amp;quot;stringArrayWrappersCount&amp;amp;quot;: 1,
        &amp;amp;quot;stringArrayWrappersChainedCalls&amp;amp;quot;: true,
        &amp;amp;quot;stringArrayWrappersParametersMaxCount&amp;amp;quot;: 2,
        &amp;amp;quot;stringArrayWrappersType&amp;amp;quot;: &amp;amp;quot;variable&amp;amp;quot;,
        &amp;amp;quot;stringArrayThreshold&amp;amp;quot;: 0.75,
        &amp;amp;quot;unicodeEscapeSequence&amp;amp;quot;: false
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
</description>
    </item><item>
      <title>MongoDB free account</title>
      <link>https://appaga.kr/blog/mongodb/mongodb0001.html</link>
      <pubDate>Sat, 26 Sep 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/mongodb/mongodb0001.html</guid>
      <description>&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://www.mongodb.com/&amp;quot;&amp;gt;www.mongodb.com&amp;lt;/a&amp;gt;에서 512M 용량의 free DB를 만든다.&amp;lt;br /&amp;gt;
회원가입을 하고 cluster를 만든다.&amp;lt;br /&amp;gt;
안내에 따라 진행하면 되니 별도의 사전 지식을 필요로 하지 않는다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;DB접속 계정은 패스워드 기반으로 생성한다.&amp;lt;br /&amp;gt;
인증서 기반으로 생성할 수도 있다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;접속가능 IP에 현재 사용중인 IP만 추가한다.&amp;lt;br /&amp;gt;
물론, 모든 IP 접속허용도 가능하다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;샘플 데이터(약 320M 정도)를 로드해서 테스트에 사용한다.&amp;lt;br /&amp;gt;
버튼 클릭만으로 샘플 데이터는 로드된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://www.mongodb.com/products/compass&amp;quot;&amp;gt;MongoDB Compass&amp;lt;/a&amp;gt;를 설치하여 샘플 데이터를 조회해본다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;연결문자는 &amp;lt;code&amp;gt;mongodb+srv://DB계정:계정암호@cluster0.mongodb.net/test&amp;lt;/code&amp;gt; 형식이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/mongodb001.jpg&amp;quot; alt=&amp;quot;img01&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
</description>
    </item><item>
      <title>Sprint boot + Mybatis + H2 + Thymeleaf + W3.css 기본 프로젝트</title>
      <link>https://appaga.kr/blog/springboot/springboot002.html</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/springboot/springboot002.html</guid>
      <description>&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications&amp;quot; title=&amp;quot;Spring Web 2.2.6&amp;quot;&amp;gt;Spring boot 2.2.6&amp;lt;/a&amp;gt;을 이용한 웹 어플리케이션 기본 프로젝트로 만든 것이다.&amp;lt;br /&amp;gt;
&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-template-engines&amp;quot; title=&amp;quot;Thymeleaf&amp;quot;&amp;gt;Thymeleaf&amp;lt;/a&amp;gt; 템플릿엔진을 이용하고 &amp;lt;a href=&amp;quot;https://www.w3schools.com/w3css/default.asp&amp;quot; title=&amp;quot;W3.CSS&amp;quot;&amp;gt;W3.CSS&amp;lt;/a&amp;gt;를 사용하여 html/css 퍼블리싱을 한다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;html/css, font 등 디자인 자원&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://www.w3schools.com/w3css/default.asp&amp;quot; title=&amp;quot;W3.CSS&amp;quot;&amp;gt;W3.CSS&amp;lt;/a&amp;gt;를 이용하여 html 화면 디자인을 처리한다.&amp;lt;br /&amp;gt;
&amp;lt;a href=&amp;quot;https://www.w3schools.com/w3css/tryw3css_examples_material.htm&amp;quot;&amp;gt;Material Design 템플릿&amp;lt;/a&amp;gt;을 기본 레이아웃으로 설정하였다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;이미지를 만들 때 PNG 파일의 백그라운드를 제거하여 투명하게 만들 때는 &amp;lt;a href=&amp;quot;https://www.remove.bg/&amp;quot;&amp;gt;removebg&amp;lt;/a&amp;gt; 홈페이지를 이용한다.&amp;lt;br /&amp;gt;
백그라운드를 제거하고자 하는 이미지 파일을 드래그앤드롭하여 온라인으로 바로 투명한 백그라운드 갖는 PNG 파일을 얻을 수 있어 유용하다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;폰트는 네이버에서 제공하는 &amp;lt;a href=&amp;quot;https://hangeul.naver.com/2017/nanum&amp;quot; title=&amp;quot;네이버 한글한글아름답게&amp;quot;&amp;gt;나눔스퀘어라운드&amp;lt;/a&amp;gt;를 사용한다.&amp;lt;br /&amp;gt;
TTF 폰트를 다운받아서 &amp;lt;a href=&amp;quot;https://www.font-converter.net&amp;quot; title=&amp;quot;Online Font Converter / Web Font Generator&amp;quot;&amp;gt;Online Font Convenverter&amp;lt;/a&amp;gt;에서 &amp;lt;code&amp;gt;EOT&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;WOFF&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;WOFF2&amp;lt;/code&amp;gt; 등으로 변환하여 사용하였다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-css&amp;quot;&amp;gt;@font-face {
  font-family: &amp;amp;quot;NanumSquareRoundR&amp;amp;quot;;
  src: url(&amp;amp;quot;./fonts/NanumSquareRoundR.eot&amp;amp;quot;); /* IE9 Compat Modes */
  src: url(&amp;amp;quot;./fonts/NanumSquareRoundR.eot?#iefix&amp;amp;quot;) format(&amp;amp;quot;embedded-opentype&amp;amp;quot;), /* IE6-IE8 */
    url(&amp;amp;quot;./fonts/NanumSquareRoundR.otf&amp;amp;quot;) format(&amp;amp;quot;opentype&amp;amp;quot;), /* Open Type Font */
    url(&amp;amp;quot;./fonts/NanumSquareRoundR.svg&amp;amp;quot;) format(&amp;amp;quot;svg&amp;amp;quot;), /* Legacy iOS */
    url(&amp;amp;quot;./fonts/NanumSquareRoundR.ttf&amp;amp;quot;) format(&amp;amp;quot;truetype&amp;amp;quot;), /* Safari, Android, iOS */
    url(&amp;amp;quot;./fonts/NanumSquareRoundR.woff&amp;amp;quot;) format(&amp;amp;quot;woff&amp;amp;quot;), /* Modern Browsers */
    url(&amp;amp;quot;./fonts/NanumSquareRoundR.woff2&amp;amp;quot;) format(&amp;amp;quot;woff2&amp;amp;quot;); /* Modern Browsers */
  font-weight: normal;
  font-style: normal;
}
body {font-family: &amp;amp;quot;NanumSquareRoundR&amp;amp;quot;, sans-serif}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;Thymeleaf 템플릿엔진 사용&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-template-engines&amp;quot; title=&amp;quot;Thymeleaf&amp;quot;&amp;gt;Thymeleaf&amp;lt;/a&amp;gt;를 템플릿엔진으로 사용한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ultraq/thymeleaf-layout-dialect&amp;quot; title=&amp;quot;Thymeleaf Layout Dialect&amp;quot;&amp;gt;Thymeleaf Layout Dialect&amp;lt;/a&amp;gt;에서 제공하는 &amp;lt;code&amp;gt;nz.net.ultraq.thymeleaf&amp;lt;/code&amp;gt; 라이브러리를 추가하여 레이아웃 설정을 추가하였다.&amp;lt;br /&amp;gt;
다음 디펜던시가 추가되야 한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;&amp;amp;lt;dependency&amp;amp;gt;
  &amp;amp;lt;groupId&amp;amp;gt;nz.net.ultraq.thymeleaf&amp;amp;lt;/groupId&amp;amp;gt;
  &amp;amp;lt;artifactId&amp;amp;gt;thymeleaf-layout-dialect&amp;amp;lt;/artifactId&amp;amp;gt;
&amp;amp;lt;/dependency&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;MVC 설정에 타임리프 템플릿엔진 설정하는 부분에 &amp;lt;code&amp;gt;templateEngine.addDialect(new LayoutDialect());&amp;lt;/code&amp;gt;로 layout-dialect를 추가해줘야 한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Configuration
public class WebMvcConfig implements WebMvcConfigurer {

	/**
	 * 타임리프 속성 생성
	 */
	@Bean
	public SpringResourceTemplateResolver templateResolver() {
		SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
		templateResolver.setPrefix(&amp;amp;quot;classpath:templates/&amp;amp;quot;);
		templateResolver.setSuffix(&amp;amp;quot;.html&amp;amp;quot;);
		templateResolver.setTemplateMode(TemplateMode.HTML);
		templateResolver.setCharacterEncoding(&amp;amp;quot;UTF-8&amp;amp;quot;);
		// TODO: Template cache is true by default. Set to false if you want
		// templates to be automatically updated when modified.
		templateResolver.setCacheable(false);
		return templateResolver;
	}

	/**
	 * 타임리프 dialect 추가
	 */
	@Bean
	public SpringTemplateEngine templateEngine() {
		SpringTemplateEngine templateEngine = new SpringTemplateEngine();
		templateEngine.setEnableSpringELCompiler(true); // Compiled SpringEL should speed up executions
		templateEngine.setTemplateResolver(templateResolver());
		templateEngine.addDialect(new LayoutDialect()); // nz.net.ultraq.thymeleaf 레이아웃 관리 추가
		return templateEngine;
	}

	@Bean
	public ThymeleafViewResolver viewResolver() {
		ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();
		viewResolver.setTemplateEngine(templateEngine());
		viewResolver.setCharacterEncoding(&amp;amp;quot;UTF-8&amp;amp;quot;);
		viewResolver.setOrder(0);
		return viewResolver;
	}

}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;XSS 공격 방어 필터 적용&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;XSS(Cross-site-scripting) 공격에 대처하기 위하여 get/post 파라미터 및 request body에 필터를 적용한다.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;GET/POST 파라미터에 XSS 공격 방어 필터 적용&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;많이 사용되는 &amp;lt;a href=&amp;quot;https://github.com/naver/lucy-xss-servlet-filter&amp;quot; title=&amp;quot;lucy-xss-servlet-filter&amp;quot;&amp;gt;네이버 lucy-xss-servlet-filter&amp;lt;/a&amp;gt; 라이브러리를 사용한다.&amp;lt;br /&amp;gt;
아래 디펜던시가 추가한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;&amp;amp;lt;dependency&amp;amp;gt;
	&amp;amp;lt;groupId&amp;amp;gt;com.navercorp.lucy&amp;amp;lt;/groupId&amp;amp;gt;
	&amp;amp;lt;artifactId&amp;amp;gt;lucy-xss-servlet&amp;amp;lt;/artifactId&amp;amp;gt;
	&amp;amp;lt;version&amp;amp;gt;2.0.0&amp;amp;lt;/version&amp;amp;gt;
&amp;amp;lt;/dependency&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;MVC 설정에 필터를 등록한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Configuration
public class WebMvcConfig implements WebMvcConfigurer {

	/**
	 * XSS 필터 적용
	 */
	@Bean
	public FilterRegistrationBean&amp;amp;lt;XssEscapeServletFilter&amp;amp;gt; getXssEscapeServletFilterRegistrationBean() {
		FilterRegistrationBean&amp;amp;lt;XssEscapeServletFilter&amp;amp;gt; registrationBean = new FilterRegistrationBean&amp;amp;lt;XssEscapeServletFilter&amp;amp;gt;();
		registrationBean.setFilter(new XssEscapeServletFilter());
		registrationBean.setOrder(1);
		registrationBean.addUrlPatterns(&amp;amp;quot;/*&amp;amp;quot;); // filter를 거칠 url patterns
		return registrationBean;
	}

}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;request body에 XSS 공격 방어 필터 적용&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;Ajax나 restful api 시에 사용되는 request body에는 lucy 필터가 적용되지 않는다고 한다.&amp;lt;br /&amp;gt;
request body에 XSS 공격 방어 필터도 같이 적용한다.&amp;lt;br /&amp;gt;
필터링을 담당하는 클래스 &amp;lt;code&amp;gt;HTMLCharacterEscapes&amp;lt;/code&amp;gt;를 생성하고:&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;public class HTMLCharacterEscapes extends CharacterEscapes {
	private final int[] asciiEscapes;

	private final CharSequenceTranslator translator;

	public HTMLCharacterEscapes() {

		Map&amp;amp;lt;CharSequence, CharSequence&amp;amp;gt; customMap = new HashMap&amp;amp;lt;&amp;amp;gt;();
		customMap.put(&amp;amp;quot;(&amp;amp;quot;, &amp;amp;quot;&amp;amp;amp;#40;&amp;amp;quot;);
		Map&amp;amp;lt;CharSequence, CharSequence&amp;amp;gt; CUSTOM_ESCAPE = Collections.unmodifiableMap(customMap);

		// XSS 방지 처리할 특수 문자 지정
		asciiEscapes = CharacterEscapes.standardAsciiEscapesForJSON();
		asciiEscapes[&amp;#39;&amp;amp;lt;&amp;#39;] = CharacterEscapes.ESCAPE_CUSTOM;
		asciiEscapes[&amp;#39;&amp;amp;gt;&amp;#39;] = CharacterEscapes.ESCAPE_CUSTOM;
		asciiEscapes[&amp;#39;&amp;amp;amp;&amp;#39;] = CharacterEscapes.ESCAPE_CUSTOM;
		asciiEscapes[&amp;#39;(&amp;#39;] = CharacterEscapes.ESCAPE_CUSTOM;

		// XSS 방지 처리 특수 문자 인코딩 값 지정
		translator = new AggregateTranslator(new LookupTranslator(EntityArrays.BASIC_ESCAPE), // &amp;amp;lt;, &amp;amp;gt;, &amp;amp;amp;, &amp;amp;quot; 는 여기에 포함됨
				new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE),
				new LookupTranslator(EntityArrays.HTML40_EXTENDED_ESCAPE), new LookupTranslator(CUSTOM_ESCAPE));

	}

	@Override
	public int[] getEscapeCodesForAscii() {
		return asciiEscapes;
	}

	@Override
	public SerializableString getEscapeSequence(int ch) {
		return new SerializedString(translator.translate(Character.toString((char) ch)));
	}

}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;MVC 설정에 &amp;lt;code&amp;gt;Jackson&amp;lt;/code&amp;gt; 컨버터에 등록해준다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Configuration
public class WebMvcConfig implements WebMvcConfigurer {

	@Override
	public void configureMessageConverters(List&amp;amp;lt;HttpMessageConverter&amp;amp;lt;?&amp;amp;gt;&amp;amp;gt; converters) {
		// request body xss 추가
		converters.add(escapingConverter());

	}

	/**
	 * request body xss 적용
	 */
	@Bean
	public HttpMessageConverter&amp;amp;lt;?&amp;amp;gt; escapingConverter() {
		ObjectMapper objectMapper = new ObjectMapper();
		objectMapper.getFactory().setCharacterEscapes(new HTMLCharacterEscapes());

		MappingJackson2HttpMessageConverter escapingConverter = new MappingJackson2HttpMessageConverter();
		escapingConverter.setObjectMapper(objectMapper);

		return escapingConverter;
	}

}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;프로젝트 실행 화면&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;기본적으로 설정된 프로젝트를 실행하면 아래와 같이 &amp;lt;a href=&amp;quot;https://www.w3schools.com/w3css/default.asp&amp;quot; title=&amp;quot;W3.CSS&amp;quot;&amp;gt;W3.CSS&amp;lt;/a&amp;gt; 템플릿이 적용된 반응형 웹페이지를 확인할 수 있다.&amp;lt;br /&amp;gt;
&amp;lt;img src=&amp;quot;/img/springboot/springboot_001.png&amp;quot; alt=&amp;quot;PC용 대화면 웹페이지&amp;quot; title=&amp;quot;PC용 큰화면&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;모바일에서는 왼쪽 네비게이션 메뉴가 좌측 상단의 메뉴 버튼으로 숨겨진다.&amp;lt;br /&amp;gt;
&amp;lt;img src=&amp;quot;/img/springboot/springboot_002.png&amp;quot; alt=&amp;quot;모바일 화면 웹페이지&amp;quot; title=&amp;quot;모바일 화면&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;github 프로젝트&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;현재 github 프로젝트에는 spring-security 관련 작업 중인 소스도 같이 들어있으나 실행하여 기본 페이지 표시에는 아무 문제가 없는 상태이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/appaga/springmvc/tree/master/appagapm&amp;quot; title=&amp;quot;github 프로젝트&amp;quot;&amp;gt;github 프로젝트&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Reference Documentation&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;For further reference, please consider the following sections:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications&amp;quot; title=&amp;quot;Spring Web 2.2.6&amp;quot;&amp;gt;Spring Web 2.2.6&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://www.w3schools.com/w3css/default.asp&amp;quot; title=&amp;quot;W3.CSS&amp;quot;&amp;gt;W3.CSS&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://hangeul.naver.com/2017/nanum&amp;quot; title=&amp;quot;네이버 한글한글아름답게&amp;quot;&amp;gt;나눔스퀘어라운드&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-template-engines&amp;quot; title=&amp;quot;Thymeleaf&amp;quot;&amp;gt;Thymeleaf&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://maven.apache.org/guides/index.html&amp;quot;&amp;gt;Official Apache Maven documentation&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/maven-plugin/&amp;quot;&amp;gt;Spring Boot Maven Plugin Reference Guide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#using-boot-devtools&amp;quot;&amp;gt;Spring Boot DevTools&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/htmlsingle/#configuration-metadata-annotation-processor&amp;quot;&amp;gt;Spring Configuration Processor&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2&amp;gt;Guides&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The following guides illustrate how to use some features concretely:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://spring.io/guides/gs/handling-form-submission/&amp;quot;&amp;gt;Handling Form Submission&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://spring.io/guides/gs/rest-service/&amp;quot;&amp;gt;Building a RESTful Web Service&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://spring.io/guides/gs/serving-web-content/&amp;quot;&amp;gt;Serving Web Content with Spring MVC&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://spring.io/guides/tutorials/bookmarks/&amp;quot;&amp;gt;Building REST services with Spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
</description>
    </item><item>
      <title>구글 애널리틱스 이벤트 추적하기</title>
      <link>https://appaga.kr/blog/google/gtag002.html</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/google/gtag002.html</guid>
      <description>&amp;lt;p&amp;gt;웹사이트에 방문한 사용자가 웹사이트에서 어떤 요소 또는 항목을 사용했는지 추적하기 위해서 구글 애널리틱스의 이벤트 추적기능을 사용한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;이벤트 추적에는 4개의 항목을 사용한다.&amp;lt;br /&amp;gt;
4개의 항목을 이용하여 사용자가 웹페이지를 어떻게 이용했는지 표현될 수 있도록 정의한다.&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;category&amp;lt;/strong&amp;gt; : 필수. 추적하고자 하는 항목의 그룹.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;action&amp;lt;/strong&amp;gt;   : 필수. 추적 행동. &amp;lt;code&amp;gt;링크를 클릭한다&amp;lt;/code&amp;gt;와 같은 행위를 표현한다.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;label&amp;lt;/strong&amp;gt;    : 선택사항(필수로 사용하길 권장함). 추적 해동에 대한 기술. &amp;lt;code&amp;gt;클릭한 링크의 주소&amp;lt;/code&amp;gt; 등의 값을 사용한다.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;value&amp;lt;/strong&amp;gt;    : 선택사항. 정수값을 이용한다. &amp;lt;code&amp;gt;동영상을 플레이한 시간&amp;lt;/code&amp;gt; 등의 값이 사용된다.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;꼭 위에 기술된 내용에 맞게 정의할 필요는 없고 이벤트 추적에 도움이 되도록 자신만의 규칙으로 설정하면 된다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;gtag.js 애널리틱스 자바스크립트를 사이트에 추가하기&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;기존 &amp;lt;code&amp;gt;analytics.js&amp;lt;/code&amp;gt;가 아닌 새로운 방식의 &amp;lt;code&amp;gt;gtag.js&amp;lt;/code&amp;gt;를 이용하도록 한다.&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;analytics.js&amp;lt;/code&amp;gt;에서 &amp;lt;code&amp;gt;gtag.js&amp;lt;/code&amp;gt;로 변경하는 방법은 아래 링크에 잘 나와있다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://developers.google.com/analytics/devguides/collection/gtagjs/migration&amp;quot;&amp;gt;Migrate from analytics.js to gtag.js&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;구글애널리틱스에 등록한 구글애널리틱스ID(&amp;lt;code&amp;gt;GA_MEASUREMENT_ID&amp;lt;/code&amp;gt;) 값을 이용하여 아래 스크립트를 웹사이트 헤더에 추가한다.&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;sendGaEvent()&amp;lt;/code&amp;gt;는 웹사이트에서 공통으로 호출한 함수를 정의한 것으로 실제로는 &amp;lt;code&amp;gt;gtag()&amp;lt;/code&amp;gt; 함수를 호출하는 역할을 할 뿐이다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-javascript&amp;quot;&amp;gt;&amp;amp;lt;script async src=&amp;amp;quot;https://www.googletagmanager.com/gtag/js?id=GA_MEASUREMENT_ID&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt;
&amp;amp;lt;script&amp;amp;gt;
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag(&amp;#39;js&amp;#39;, new Date());

  gtag(&amp;#39;config&amp;#39;, &amp;#39;GA_MEASUREMENT_ID&amp;#39;);
  
  function sendGaEvent(category, action, label, value) {
	  gtag(&amp;#39;event&amp;#39;, action||&amp;#39;ACTION&amp;#39;, {
		&amp;#39;event_category&amp;#39;: category||&amp;#39;CATEGORY&amp;#39;,
		&amp;#39;event_label&amp;#39;: label||&amp;#39;&amp;#39;,
		&amp;#39;value&amp;#39;: value||&amp;#39;&amp;#39;
	  });
  }
&amp;amp;lt;/script&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;이벤트 등록하기&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;아래 예시와 같이 링크를 클릭하면 &amp;lt;code&amp;gt;sendGaEvent()&amp;lt;/code&amp;gt; 함수를 호출하여 구글애널리틱스에 이벤트를 추적하도록 한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;a href=&amp;amp;quot;/category/event&amp;amp;quot; onclick=&amp;amp;quot;sendGaEvent(&amp;#39;메뉴&amp;#39;, &amp;#39;click&amp;#39;, &amp;#39;이벤트보기&amp;#39;)&amp;amp;quot;&amp;amp;gt;이벤트보기&amp;amp;lt;/a&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
</description>
    </item><item>
      <title>Sprint boot + Mybatis + H2 + Thymeleaf + W3.css</title>
      <link>https://appaga.kr/blog/springboot/springboot001.html</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/springboot/springboot001.html</guid>
      <description>&amp;lt;p&amp;gt;스프링부트 기반의 샘플 프로젝트를 구현하고자 한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Sprint boot + Mybatis + H2 + Thymeleaf + W3.css 을 사용하여 구현을 시작한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;JSP 파일에서 JSTL을 이용하는데 익숙하지만 타임리프를 맛보기 정도로 습득하여 적용하고 테스트 해보니&amp;lt;br /&amp;gt;
쉽게 개념을 이해할 수 있고 이삼일 정도면 기본적으로 사용하는데 문제가 없어 보이는 반면에&amp;lt;br /&amp;gt;
JSTL 보다는 많은 기능을 제공한다고 생각된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;특히, 자바스크립트 지원은 아주 훌륭하고 원하던 기능이다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;Thymeleaf Javascript inlining&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;타임리프는 자바스크립트 내에서도 개발에 편리하고 개발시간을 단축할 수 있는 훌륭한 역할을 한다고 판단된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;로컬에서 작업하던 소스 파일을 웹브라우저로 직접 오픈하여도 자바스크립트가 실행되는데 문제없도록 타임리프 태그를&amp;lt;br /&amp;gt;
숨길 수 있는 방법을 제공하는 것이 아주 매력적이다.&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/blog/springboot/thymeleaf001.html&amp;quot;&amp;gt;타임리프 자바스크립트 사용 샘플&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2&amp;gt;Extending Thymeleaf dialects&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;타임리프 dialect를 확장하여 커스텀 속성, 태그를 만드는 방법이다.&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/blog/springboot/thymeleaf002.html&amp;quot;&amp;gt;dialect 확장하기&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/blog/springboot/thymeleaf003.html&amp;quot;&amp;gt;dialect 확장 더 많이&amp;amp;hellip; 태그에 class 추가 하기&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2&amp;gt;H2 디비 연동과 다중 데이터베이스 연결 지원.&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;메모리 디비가 지원되는 H2 데이터베이스를 연동하고 쿼리 실행 결과를 타임리프로 화면에 표시하는 샘플이다.&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/blog/springboot/db001.html&amp;quot;&amp;gt;H2 디비 연동 샘플&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;h2&amp;gt;관련 링크&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://maven.apache.org/guides/index.html&amp;quot;&amp;gt;Official Apache Maven documentation&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.4.RELEASE/maven-plugin/&amp;quot;&amp;gt;Spring Boot Maven Plugin Reference Guide&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.4.RELEASE/reference/htmlsingle/#using-boot-devtools&amp;quot;&amp;gt;Spring Boot DevTools&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.4.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications&amp;quot;&amp;gt;Spring Web&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://docs.spring.io/spring-boot/docs/2.2.4.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-template-engines&amp;quot;&amp;gt;Spring Thymeleaf&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://www.thymeleaf.org/documentation.html&amp;quot;&amp;gt;Thymeleaf Docs.&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://mybatis.org/mybatis-3/&amp;quot;&amp;gt;MyBatis homepage&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://mybatis.org/spring/&amp;quot;&amp;gt;MyBatis-Spring&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://www.h2database.com/&amp;quot;&amp;gt;H2 Database Engine&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;https://www.w3schools.com/w3css/&amp;quot;&amp;gt;W3.CSS homepage&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
</description>
    </item><item>
      <title>Extending Thymeleaf dialect : processing attribute value</title>
      <link>https://appaga.kr/blog/springboot/thymeleaf003.html</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/springboot/thymeleaf003.html</guid>
      <description>&amp;lt;h1&amp;gt;thymeleaf dialect 확장하여 태그 속성값을 변환하여 출력하기&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;타임리프 속성의 값으로 입력된 값을 처리하여 원하는 출력으로 변환하고자 한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;tlmd&amp;lt;/code&amp;gt; dialect를 만들고 &amp;lt;code&amp;gt;ox&amp;lt;/code&amp;gt; 속성을 추가한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;속성에 입력한 값이 &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;에 해당하는 값(&amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;이 아닌 숫자, &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;가 아닌 문자열 등) 이면 &amp;lt;code&amp;gt;●&amp;lt;/code&amp;gt;을 출력하고,&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;에 해당하는 값(숫자 &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; 등) 이면 &amp;lt;code&amp;gt;○&amp;lt;/code&amp;gt;을 출력한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;td tlmd:ox=&amp;amp;quot;${item.user.active_yn}&amp;amp;quot;&amp;amp;gt;active_yn&amp;amp;lt;/td&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;위와 같이 코딩을 하면 &amp;lt;code&amp;gt;${item.user.active_yn}&amp;lt;/code&amp;gt;이 &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt; 문자열을 가지고 있기 때문에 아래와 같이 화면에 출력된다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;td&amp;amp;gt;●&amp;amp;lt;/td&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://www.thymeleaf.org/doc/articles/sayhelloagainextendingthymeleafevenmore5minutes.html&amp;quot;&amp;gt;타임리프 참조사이트&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;custom dialect 클래스&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;AbstractProcessorDialect&amp;lt;/code&amp;gt;을 확장하여 &amp;lt;code&amp;gt;TlmdDialect&amp;lt;/code&amp;gt; 클래스를 생성한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;public class TlmdDialect extends AbstractProcessorDialect {
	private static final String PREFIX = &amp;amp;quot;tlmd&amp;amp;quot;;
	
	public TlmdDialect() {
		super(&amp;amp;quot;Ttallaemideul Dialect&amp;amp;quot; // dialect name
				, PREFIX	// 접두사. 속성 사용방법: tlmd:*
				, 1000 		// dialect 우선순위
				);
	}

	/**
	 * dialect 처리기를 초기화 한다.
	 */
	@Override
	public Set&amp;amp;lt;IProcessor&amp;amp;gt; getProcessors(String dialectPrefix) {
		final Set&amp;amp;lt;IProcessor&amp;amp;gt; processors = new HashSet&amp;amp;lt;&amp;amp;gt;();
		processors.add(new OxAttrTagProcessor(dialectPrefix));
		return processors;
	}

}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/thymeleaf/TlmdDialect.java&amp;quot;&amp;gt;TlmdDialect.java&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;속성태그 처리기 클래스&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;AbstractAttributeTagProcessor&amp;lt;/code&amp;gt;을 확장하여 &amp;lt;code&amp;gt;OxAttrTagProcessor&amp;lt;/code&amp;gt; 클래스를 생성한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;오버라이드한 &amp;lt;code&amp;gt;doProcess&amp;lt;/code&amp;gt; 함수에서 속성값(&amp;lt;code&amp;gt;attributeValue&amp;lt;/code&amp;gt;)을 파싱 처리하여 값을 &amp;lt;code&amp;gt;attrVal&amp;lt;/code&amp;gt; 획득한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;attrVal&amp;lt;/code&amp;gt; 값이 &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;에 해당하면 &amp;lt;code&amp;gt;●&amp;lt;/code&amp;gt;을 태그의 바디에 설정하고 아니면 &amp;lt;code&amp;gt;○&amp;lt;/code&amp;gt;을 설정한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Override
protected void doProcess(ITemplateContext context, IProcessableElementTag tag, AttributeName attributeName,
		String attributeValue, IElementTagStructureHandler structureHandler) {
	// 속성값을 타임리프 표준 표현식으로 파싱한 후 표현식을 처리한다.
	final IEngineConfiguration configuration = context.getConfiguration();
	final IStandardExpressionParser parser = StandardExpressions.getExpressionParser(configuration);
	final IStandardExpression expression = parser.parseExpression(context, attributeValue);
	final Object attrVal = expression.execute(context);
	// 문자열이 true에 해당하는지 판단.
	if (UtilString.isTrue(attrVal)) {
		structureHandler.setBody(YES, false);
	} else {
		structureHandler.setBody(NO, false);
	}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;isTrue()&amp;lt;/code&amp;gt; 함수는 파라미터의 값이 &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;에 해당하는 경우 &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;를 리턴한다.&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;에 해당하는 문자열은 &amp;lt;code&amp;gt;0&amp;lt;/code&amp;gt;이 아닌 숫자, &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;undefined&amp;lt;/code&amp;gt; 문자열이 아닌 경우이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/thymeleaf/OxAttrTagProcessor.java&amp;quot;&amp;gt;OxAttrTagProcessor.java&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;dialect 등록&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;MVC 설정시에 등록한 템플릿 엔진에 생성한 dialect 클래스 &amp;lt;code&amp;gt;TlmdDialect&amp;lt;/code&amp;gt;를 등록한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Bean
public SpringTemplateEngine templateEngine() {
	SpringTemplateEngine templateEngine = new SpringTemplateEngine();
	templateEngine.setEnableSpringELCompiler(true); // Compiled SpringEL should speed up executions
	templateEngine.setTemplateResolver(templateResolver());
	templateEngine.addDialect(layoutDialect());	// 레이아웃 관리
	templateEngine.addDialect(new HelloDialect()); // 샘플 dialect
	templateEngine.addDialect(new TlmdDialect()); // tlmd dialect
	return templateEngine;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/config/WebMvcConfig.java&amp;quot;&amp;gt;WebMvcConfig.java&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;dialect 사용&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;웹페이지에 &amp;lt;code&amp;gt;tlmd&amp;lt;/code&amp;gt; dialect를 사용함을 명시한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&amp;amp;lt;html xmlns:th=&amp;amp;quot;http://www.thymeleaf.org&amp;amp;quot;
      xmlns:layout=&amp;amp;quot;http://www.ultraq.net.nz/thymeleaf/layout&amp;amp;quot;
      xmlns:tlmd=&amp;amp;quot;https://ttallaemideul.github.io&amp;amp;quot;
      layout:decorator=&amp;amp;quot;~{layouts/layout_base}&amp;amp;quot;&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;tlmd:ox&amp;lt;/code&amp;gt; 태그를 적용한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;tr th:each=&amp;amp;quot;item : ${userList}&amp;amp;quot;&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${item.user.login_id}&amp;amp;quot;&amp;amp;gt;login_id&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${item.user.user_name}&amp;amp;quot;&amp;amp;gt;user_name&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td tlmd:ox=&amp;amp;quot;${item.user.active_yn}&amp;amp;quot;&amp;amp;gt;active_yn&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td tlmd:ox=&amp;amp;quot;${item.user.expired_yn}&amp;amp;quot;&amp;amp;gt;expired_yn&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td tlmd:ox=&amp;amp;quot;${item.user.locked_yn}&amp;amp;quot;&amp;amp;gt;locked_yn&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td tlmd:ox=&amp;amp;quot;${item.user.pwd_expired_yn}&amp;amp;quot;&amp;amp;gt;pwd_expired_yn&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${item.user.reg_dt}&amp;amp;quot;&amp;amp;gt;reg_dt&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${item.user.upd_dt}&amp;amp;quot;&amp;amp;gt;upd_dt&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td&amp;amp;gt;
  	&amp;amp;lt;span th:each=&amp;amp;quot;role : ${item.roles}&amp;amp;quot;&amp;amp;gt;
  		[[${role.roleNm}]]&amp;amp;lt;small th:text=&amp;amp;quot;|(${role.desc})|&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/small&amp;amp;gt;&amp;amp;lt;br&amp;amp;gt;
  	&amp;amp;lt;/span&amp;amp;gt;
  &amp;amp;lt;/td&amp;amp;gt;
&amp;amp;lt;/tr&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/resources/templates/web/admin/admin_main.html&amp;quot;&amp;gt;admin_main.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;화면 랜더링 결과&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;최종적으로 화면에 나타나는 결과물이다.&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;정상&amp;lt;/code&amp;gt; 컬럼은 데이터베이스에 값이 &amp;lt;code&amp;gt;1&amp;lt;/code&amp;gt;이 저장되어 있기 때문에 &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;에 해당하여 &amp;lt;code&amp;gt;●&amp;lt;/code&amp;gt;로 표시된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/tlmd_web/tlmd_web_002.PNG&amp;quot; alt=&amp;quot;tlmd:ox 적용 결과&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;&amp;lt;code&amp;gt;class&amp;lt;/code&amp;gt;를 변경하기&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;태그 본문의 문자열을 처리하는 것에 추가적으로 태그 속성 중에 &amp;lt;code&amp;gt;class&amp;lt;/code&amp;gt;를 변경하도록 하자.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;w3-css&amp;lt;/code&amp;gt;를 사용하고 있기 때문에 &amp;lt;code&amp;gt;w3-color&amp;lt;/code&amp;gt; 클래스를 이용할 것 이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://www.w3schools.com/w3css/w3css_colors.asp&amp;quot;&amp;gt;W3.CSS Colors&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;●&amp;lt;/code&amp;gt;를 표시할 때는 &amp;lt;code&amp;gt;w3-text-blue&amp;lt;/code&amp;gt; 클래스를 이용하고 &amp;lt;code&amp;gt;○&amp;lt;/code&amp;gt;를 표시할 때는 &amp;lt;code&amp;gt;w3-text-gray&amp;lt;/code&amp;gt; 클래스를 이용한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;OxAttrTagProcessor&amp;lt;/code&amp;gt; 클래스의 &amp;lt;code&amp;gt;doProcess()&amp;lt;/code&amp;gt; 함수에서 &amp;lt;code&amp;gt;tag&amp;lt;/code&amp;gt; 객체로 부터 &amp;lt;code&amp;gt;class&amp;lt;/code&amp;gt; 속성을 얻어 그 값을 가져온다.&amp;lt;br /&amp;gt;
이 값에 html 태그의 기존 class 값이 들어있다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;final IAttribute cls = tag.getAttribute(CLS);
String oldCls = null;
if (cls != null) {
	oldCls = cls.getValue();
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;태그의 바디를 설정할 때 &amp;lt;code&amp;gt;structureHandler.setAttribute()&amp;lt;/code&amp;gt; 함수로 &amp;lt;code&amp;gt;class&amp;lt;/code&amp;gt;를 설정하도록 한다.&amp;lt;br /&amp;gt;
이 때, 기존 클래스 &amp;lt;code&amp;gt;oldCls&amp;lt;/code&amp;gt;가 존재하면 뒤에 추가하도록 한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;최종적으로 완료된 &amp;lt;code&amp;gt;OxAttrTagProcessor.doProcess()&amp;lt;/code&amp;gt; 함수이다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Override
protected void doProcess(ITemplateContext context, IProcessableElementTag tag, AttributeName attributeName,
		String attributeValue, IElementTagStructureHandler structureHandler) {
	// 속성값을 타임리프 표준 표현식으로 파싱한 후 표현식을 처리한다.
	final IEngineConfiguration configuration = context.getConfiguration();
	final IStandardExpressionParser parser = StandardExpressions.getExpressionParser(configuration);
	final IStandardExpression expression = parser.parseExpression(context, attributeValue);
	final Object attrVal = expression.execute(context);
	final IAttribute cls = tag.getAttribute(CLS);
	String oldCls = null;
	if (cls != null) {
		oldCls = cls.getValue(); // 기존 class 값.
	}
	// 문자열이 true에 해당하는지 판단.
	if (UtilString.isTrue(attrVal)) {
		if (oldCls != null) {
			// 기존 클래스에 추가
			structureHandler.setAttribute(CLS, oldCls + &amp;amp;quot; &amp;amp;quot; + CLS_YES);
		} else {
			structureHandler.setAttribute(CLS, CLS_YES);
		}
		structureHandler.setBody(YES, false);
	} else {
		if (oldCls != null) {
			structureHandler.setAttribute(CLS, oldCls + &amp;amp;quot; &amp;amp;quot; + CLS_NO);
		} else {
			structureHandler.setAttribute(CLS, CLS_NO);
		}
		structureHandler.setBody(NO, false);
	}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;화면은 이제 아래 이미지와 같이 클래스가 적용되어 표시된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/tlmd_web/tlmd_web_003.PNG&amp;quot; alt=&amp;quot;class가 적용된 화면&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;생성된 html 코드를 보면 아래와 같이 경우에 따라 클래스가 추가되었고,&amp;lt;br /&amp;gt;
기존 &amp;lt;code&amp;gt;test&amp;lt;/code&amp;gt; 클래스가 태그에 있었던 첫 번째 &amp;lt;code&amp;gt;td&amp;lt;/code&amp;gt; 태그에는 &amp;lt;code&amp;gt;test&amp;lt;/code&amp;gt; 클래스 뒤에 추가되었다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt; &amp;amp;lt;td class=&amp;amp;quot;test w3-text-blue&amp;amp;quot;&amp;amp;gt;●&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td class=&amp;amp;quot;w3-text-gray&amp;amp;quot;&amp;amp;gt;○&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td class=&amp;amp;quot;w3-text-gray&amp;amp;quot;&amp;amp;gt;○&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td class=&amp;amp;quot;w3-text-gray&amp;amp;quot;&amp;amp;gt;○&amp;amp;lt;/td&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/thymeleaf/thymeleafexamples-extrathyme&amp;quot;&amp;gt;타임리프 참조사이트&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;샘플 코드&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;아래 샘플 프로젝트에서 이 문서에서 설명한 소스를 확인할 수 있다.&amp;lt;br /&amp;gt;
프로젝트를 받아서 직접 빌드하여 실행하고 결과를 확인해보면 도움이 될 것이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/tree/master/tlmd_web&amp;quot;&amp;gt;github 샘플 프로젝트&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
</description>
    </item><item>
      <title>Creating Thymeleaf Custom Tags</title>
      <link>https://appaga.kr/blog/springboot/thymeleaf002.html</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/springboot/thymeleaf002.html</guid>
      <description>&amp;lt;h1&amp;gt;타임리프 커스텀 태그 만들기&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;타임리프 커스텀 태그는 생성되는 태크에 속성을 부여하고 생성 전/후 처리, 표준 표현식에 대응되는 부분 등으로 구성되는 dialect를 생성하여 구현할 수 있다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://www.thymeleaf.org/doc/articles/sayhelloextendingthymeleaf5minutes.html&amp;quot;&amp;gt;참조사이트&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;속성 처리기: 화면 표시 담당&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;AbstractAttributeTagProcessor&amp;lt;/code&amp;gt; 클래스를 확장하여 화면에 태그 표시를 담당하는 처리기를 작성한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;public class SayToAttrTagProcessor extends AbstractAttributeTagProcessor {

	private static final String ATTR_NAME = &amp;amp;quot;sayto&amp;amp;quot;;
	private static final int PRECEDENCE = 10000;
	protected SayToAttrTagProcessor(String dialectPrefix) {
		super(
				TemplateMode.HTML		// HTML 모드로 설정
				, dialectPrefix						// 접두사
				,null										// 태그명 미설정. 적용가능 태그명에 제약이 없다.
				,false										// 태그명에 접두사를 적용하지 않는다.
				,ATTR_NAME						// 적용될 속성명
				,true										// 속성명에 dialect 접두사를 사용한다.
				,PRECEDENCE					//  dialect 들 내에서 적용 우선권.
				,true										// 적용한 속성명은 처리 후 삭제한다.
		);
	}

	@Override
	protected void doProcess(ITemplateContext context, IProcessableElementTag tag, AttributeName attributeName,
			String attributeValue, IElementTagStructureHandler structureHandler) {
		structureHandler.setBody(&amp;amp;quot;Hello, &amp;amp;quot; + HtmlEscape.escapeHtml5(attributeValue) + &amp;amp;quot;!&amp;amp;quot;, false);
	}
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/sample/thymeleaf/SayToAttrTagProcessor.java&amp;quot;&amp;gt;SayToAttrTagProcessor&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;dialect 클래스 생성&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;dialect 클래스를 생성하여 타임리프에서 새롭게 만든 커스텀 태그를 사용할 수 있도록 해준다.&amp;lt;br /&amp;gt;
사용할 접두사는 &amp;lt;code&amp;gt;hello&amp;lt;/code&amp;gt; 이고, 속성명은 &amp;lt;code&amp;gt;sayto&amp;lt;/code&amp;gt;가 되어 화면에서 호출시에는 &amp;lt;code&amp;gt;hello:sayto&amp;lt;/code&amp;gt;와 같이 사용한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;public class HelloDialect extends AbstractProcessorDialect {
	private static final String PREFIX = &amp;amp;quot;hello&amp;amp;quot;;
	
	public HelloDialect() {
		super(&amp;amp;quot;Hello Dialect&amp;amp;quot; // dialect name
				, PREFIX// 접두사. 속성 사용방법: hello:*
				, 1000 // dialect 우선순위
				);
	}

	/**
	 * dialect 처리기를 초기화 한다.
	 */
	@Override
	public Set&amp;amp;lt;IProcessor&amp;amp;gt; getProcessors(String dialectPrefix) {
		final Set&amp;amp;lt;IProcessor&amp;amp;gt; processors = new HashSet&amp;amp;lt;&amp;amp;gt;();
		processors.add(new SayToAttrTagProcessor(dialectPrefix));
		return processors;
	}

}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/sample/thymeleaf/HelloDialect.java&amp;quot;&amp;gt;HelloDialect&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;MVC 설정에 신규 dialect 추가&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;어플리케이션이 로드되어 타임리프 설정이 진행될 때 신규 dialect를 추가해준다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Bean
public SpringResourceTemplateResolver templateResolver() {
	SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();
	templateResolver.setPrefix(&amp;amp;quot;classpath:templates/&amp;amp;quot;);
	templateResolver.setSuffix(&amp;amp;quot;.html&amp;amp;quot;);
	templateResolver.setTemplateMode(TemplateMode.HTML);
	templateResolver.setCharacterEncoding(&amp;amp;quot;UTF-8&amp;amp;quot;);
	// TODO: Template cache is true by default. Set to false if you want
	// templates to be automatically updated when modified.
	templateResolver.setCacheable(true);
	return templateResolver;
}

@Bean
public SpringTemplateEngine templateEngine() {
	SpringTemplateEngine templateEngine = new SpringTemplateEngine();
	templateEngine.setEnableSpringELCompiler(true); // Compiled SpringEL should speed up executions
	templateEngine.setTemplateResolver(templateResolver());
	templateEngine.addDialect(new HelloDialect());
	return templateEngine;
}

@Bean
public ThymeleafViewResolver viewResolver() {
	ThymeleafViewResolver viewResolver = new ThymeleafViewResolver();
	viewResolver.setTemplateEngine(templateEngine());
	viewResolver.setCharacterEncoding(&amp;amp;quot;UTF-8&amp;amp;quot;);
	viewResolver.setOrder(0);
	return viewResolver;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/config/WebMvcConfig.java&amp;quot;&amp;gt;WebMvcConfig&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;화면에서 신규 dialect 사용&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;hello&amp;lt;/code&amp;gt; 접두사가 html 편집기에서 작동되도록 추가한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;html xmlns:th=&amp;amp;quot;http://www.thymeleaf.org&amp;amp;quot;
      xmlns:layout=&amp;amp;quot;http://www.ultraq.net.nz/thymeleaf/layout&amp;amp;quot;
      xmlns:hello=&amp;amp;quot;http://hello&amp;amp;quot;
      layout:decorator=&amp;amp;quot;~{layouts/layout_base}&amp;amp;quot;&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;신규 태그는 아래와 같이 사용한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;p hello:sayto=&amp;amp;quot;커스텀 dialect&amp;amp;quot;&amp;amp;gt;Hi ya!&amp;amp;lt;/p&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;생성된 태그 결과는 다음과 같다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;p&amp;amp;gt;Hello, 커스텀 dialect!&amp;amp;lt;/p&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;샘플 코드&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;아래 샘플 프로젝트에서 이 문서에서 설명한 소스를 확인할 수 있다.&amp;lt;br /&amp;gt;
프로젝트를 받아서 직접 빌드하여 실행하고 결과를 확인해보면 도움이 될 것이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/tree/master/tlmd_web&amp;quot;&amp;gt;github 샘플 프로젝트&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
</description>
    </item><item>
      <title>Springboot with H2 database, multi database</title>
      <link>https://appaga.kr/blog/springboot/db001.html</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/springboot/db001.html</guid>
      <description>&amp;lt;h1&amp;gt;springboot에서 H2 데이터베이스 연동&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;스프링부트에 H2 디비를 연동한다.&amp;lt;br /&amp;gt;
다중 데이터베이스 연결을 지원하기 위해서 맵퍼 어노테이션을 이용한다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;의존성 추가 &amp;lt;code&amp;gt;pom.xml&amp;lt;/code&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-xml&amp;quot;&amp;gt;&amp;amp;lt;dependency&amp;amp;gt;
	&amp;amp;lt;groupId&amp;amp;gt;com.h2database&amp;amp;lt;/groupId&amp;amp;gt;
	&amp;amp;lt;artifactId&amp;amp;gt;h2&amp;amp;lt;/artifactId&amp;amp;gt;
	&amp;amp;lt;scope&amp;amp;gt;runtime&amp;amp;lt;/scope&amp;amp;gt;
&amp;amp;lt;/dependency&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/pom.xml&amp;quot;&amp;gt;pom.xml&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;프로퍼티 설정 &amp;lt;code&amp;gt;application.properties&amp;lt;/code&amp;gt;&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;spring.datasource.hikari.jdbc-url=jdbc:h2:mem:test;MODE=PostgreSQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.hikari.username=sa
spring.datasource.hikari.password=
spring.datasource.hikari.driver-class-name=org.h2.Driver
spring.datasource.hikari.maximum-pool-size=100 
spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.minimum-idle=5 
spring.datasource.hikari.connection-timeout=100000
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/resources/config/application-local-db.properties&amp;quot;&amp;gt;application-local-db.properties&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;H2용 맵퍼 어노테이션 생성&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;다중 데이터베이스 소스에 연결할 수 있도록 맵퍼 어노테이션을 정의하여 맵퍼에서 이용한다.&amp;lt;br /&amp;gt;
나중에 새로운 디비 연결을 추가하기가 용이해진다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Target({ ElementType.TYPE }) 
@Retention(RetentionPolicy.RUNTIME) 
@Documented 
@Component
public @interface DbH2ConnMapper {
	String value() default &amp;amp;quot;&amp;amp;quot;;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/config/database/DbH2ConnMapper.java&amp;quot;&amp;gt;DbH2ConnMapper.java&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;H2용 맵퍼 어노테이션과 연동되는 디비 연결을 설정한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Configuration
@MapperScan(basePackages =  &amp;amp;quot;io.github.ttallaemideul.**&amp;amp;quot;
	, annotationClass = DbH2ConnMapper.class
	, sqlSessionFactoryRef = &amp;amp;quot;dbH2SessionFactory&amp;amp;quot;)
@EnableTransactionManagement
public class DbH2DatabaseConfig {
...
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;스프링부트 어플리케이션이 기동될 때 테이블을 생성하고 초기 데이터를 생성하도록 초기화코드를 추가한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@Bean(name=&amp;amp;quot;dbH2DataSourceInitializer&amp;amp;quot;)
public DataSourceInitializer dataSourceInitializer(@Qualifier(&amp;amp;quot;dbH2DataSource&amp;amp;quot;) DataSource datasource) {
	ResourceDatabasePopulator resourceDatabasePopulator = new ResourceDatabasePopulator();
	resourceDatabasePopulator.addScript(new ClassPathResource(&amp;amp;quot;config/database/h2-schema.sql&amp;amp;quot;));
	resourceDatabasePopulator.addScript(new ClassPathResource(&amp;amp;quot;config/database/h2-data.sql&amp;amp;quot;));

	DataSourceInitializer dataSourceInitializer = new DataSourceInitializer();
	dataSourceInitializer.setDataSource(datasource);
	dataSourceInitializer.setDatabasePopulator(resourceDatabasePopulator);
	return dataSourceInitializer;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/config/database/DbH2DatabaseConfig.java&amp;quot;&amp;gt;DbH2DatabaseConfig.java&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;맵퍼 생성&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;H2 디비에 쿼리를 실행하는 맵퍼 인터페이스를 생성한다.&amp;lt;br /&amp;gt;
앞에서 정의한 &amp;lt;code&amp;gt;@DbH2ConnMapper&amp;lt;/code&amp;gt; 어노테이션을 추가했기 때문에 H2 디비에서 쿼리가 실행된다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@DbH2ConnMapper
public interface H2MapperH2 {

	public Date getServerNow();
	public List&amp;amp;lt;Map&amp;amp;lt;String, Object&amp;amp;gt;&amp;amp;gt; getUsers();
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/sample/h2/H2MapperH2.java&amp;quot;&amp;gt;H2MapperH2.java&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;thymeleaf th:each로 목록 표시&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;배열 형태의 객체는 타임리프의 &amp;lt;code&amp;gt;th:each&amp;lt;/code&amp;gt;로 표시할 수 있다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;컨트롤러에서 &amp;lt;code&amp;gt;List&amp;lt;/code&amp;gt;로 뷰에 &amp;lt;code&amp;gt;users&amp;lt;/code&amp;gt; 객체를 전달한다. 이 객체는 사용자 목록을 가지고 있다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;@GetMapping
public String main(Model model) {
	List&amp;amp;lt;Map&amp;amp;lt;String, Object&amp;amp;gt;&amp;amp;gt; users = h2Service.getUsers();
	if(log.isDebugEnabled()) {
		log.debug(&amp;amp;quot;users={}&amp;amp;quot;, users);
	}
	model.addAttribute(&amp;amp;quot;serverNow&amp;amp;quot;, h2Service.getServerNow());
	model.addAttribute(&amp;amp;quot;users&amp;amp;quot;, users);
	return &amp;amp;quot;sample/h2/main&amp;amp;quot;;
}
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/java/io/github/ttallaemideul/sample/h2/H2Controller.java&amp;quot;&amp;gt;H2Controller.java&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;타임리프 &amp;lt;code&amp;gt;th:each=&amp;amp;quot;user : ${users}&amp;amp;quot;&amp;lt;/code&amp;gt; 태그는 &amp;lt;code&amp;gt;${users}&amp;lt;/code&amp;gt; 목록의 객체 하나씩을  &amp;lt;code&amp;gt;user&amp;lt;/code&amp;gt; 객체로 세팅하여 루프에서 사용하도록 한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-html&amp;quot;&amp;gt;&amp;amp;lt;tr th:each=&amp;amp;quot;user : ${users}&amp;amp;quot;&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${user.USERID}&amp;amp;quot;&amp;amp;gt;USERID&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${user.FIRST_NAME}&amp;amp;quot;&amp;amp;gt;first_name&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${user.LAST_NAME}&amp;amp;quot;&amp;amp;gt;last_name&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${user.EMAIL}&amp;amp;quot;&amp;amp;gt;email&amp;amp;lt;/td&amp;amp;gt;
  &amp;amp;lt;td th:text=&amp;amp;quot;${user.REG_DT}&amp;amp;quot;&amp;amp;gt;reg_dt&amp;amp;lt;/td&amp;amp;gt;
&amp;amp;lt;/tr&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/resources/templates/sample/h2/main.html&amp;quot;&amp;gt;main.html&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;최종적으로 아래와 같은 화면이 구현된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/tlmd_web/tlmd_web_001.png&amp;quot; alt=&amp;quot;html결과&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;샘플 프로젝트&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;아래 샘플 소스코드에서 이 문서에서 설명한 소스를 확인할 수 있다.&amp;lt;br /&amp;gt;
프로젝트를 받아서 직접 빌드하여 실행하고 결과를 확인해보면 도움이 될 것이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot&amp;quot;&amp;gt;github 샘플 프로젝트&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
</description>
    </item><item>
      <title>Springboot Thymeleaf Javascript Inlining</title>
      <link>https://appaga.kr/blog/springboot/thymeleaf001.html</link>
      <pubDate>Wed, 18 Mar 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/springboot/thymeleaf001.html</guid>
      <description>&amp;lt;h1&amp;gt;타임리프 자바스크립트 인라인 이용하기&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;자바스크립트에서 타임리프 태그를 사용하기 위해서는 &amp;lt;code&amp;gt;th:inline=&amp;amp;quot;javascript&amp;amp;quot;&amp;lt;/code&amp;gt;를 적용하여 사용한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-js&amp;quot;&amp;gt;&amp;amp;lt;script type=&amp;amp;quot;text/javascript&amp;amp;quot; th:inline=&amp;amp;quot;javascript&amp;amp;quot;&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;인라인을 종료하여 타임리프 태그가 작동되지 않도록 하려면 th:inline=&amp;amp;quot;none&amp;amp;quot;을 이용한다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;모델 객체를 자동으로 json 객체로 변환&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;[[${session}]]&amp;lt;/code&amp;gt;로 객체를 호출하면 타임리프가 자동으로 json 객체로 변환하여 준다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;아래 샘플에서 &amp;lt;code&amp;gt;/*[[${session}]]*/&amp;lt;/code&amp;gt;를 이용하는 것과 &amp;lt;code&amp;gt;[[${session}]]&amp;lt;/code&amp;gt;를 이용하는 것의 차이는&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;session2&amp;lt;/code&amp;gt; 선언부는 자바스크립트 문법을 깨트리기 때문에 소스 html 파일을 웹브라우저에서 바로 오픈하면 스크립트가 실행되지 않는다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-js&amp;quot;&amp;gt;var session1 = /*[[${session}]]*/ null;
var session2 = [[${session}]];
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;/*[[${...}]]*/&amp;lt;/code&amp;gt; 형식은 자바스크립 문법상 주석에 해당하기 때문에 문제가 없다. 웹브라우저에서 바로 오픈하면 다음과 같은 코드로 해석될 것이다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-js&amp;quot;&amp;gt;var session =  null;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;웹서버에서 실행되어 타임리프가 &amp;lt;code&amp;gt;${session}&amp;lt;/code&amp;gt;을 자동으로 json 객체로 변화하면 다음과 같은 코드가 생성된다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-js&amp;quot;&amp;gt;var session = {&amp;amp;quot;\uC601\uC5B4\uC774\uB984&amp;amp;quot;:&amp;amp;quot;TtalLaeMideul&amp;amp;quot;,&amp;amp;quot;name&amp;amp;quot;:&amp;amp;quot;\uB538\uB0B4\uBBF8\uB4E4&amp;amp;quot;,&amp;amp;quot;key_x&amp;amp;quot;:&amp;amp;quot;from session&amp;amp;quot;};
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;자바스크립트 내에서 타임리프 태그 이용하기&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;[# th:...]&amp;lt;/code&amp;gt;로 시작하여 &amp;lt;code&amp;gt;[/]&amp;lt;/code&amp;gt;로 닫힌 내부에서 타임리프 태그를 이용할 수 있다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;아래 소스는 &amp;lt;code&amp;gt;${DEBUG_MODE}&amp;lt;/code&amp;gt;의 값이 &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt;이면 로그를 찍는 코드이다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-js&amp;quot;&amp;gt;&amp;amp;lt;script type=&amp;amp;quot;text/javascript&amp;amp;quot; th:inline=&amp;amp;quot;javascript&amp;amp;quot;&amp;amp;gt;

var session = /*[[${session}]]*/ null;
[# th:if=&amp;amp;quot;${DEBUG_MODE}&amp;amp;quot;]
console.log(&amp;#39;session&amp;#39;, session);
[/]
&amp;amp;lt;/script&amp;amp;gt;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;샘플 코드&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;아래 샘플 소스코드에서 이 문서에서 설명한 소스를 확인할 수 있다.&amp;lt;br /&amp;gt;
프로젝트를 받아서 직접 빌드하여 실행하고 결과를 확인해보면 도움이 될 것이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://github.com/ttallaemideul/springboot/blob/master/tlmd_web/src/main/resources/templates/sample/thymeleaf/javascript.html&amp;quot;&amp;gt;github 샘플 소스&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
</description>
    </item><item>
      <title>Eclipse ini 설정</title>
      <link>https://appaga.kr/blog/eclipse/eclipse001.html</link>
      <pubDate>Thu, 5 Mar 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/eclipse/eclipse001.html</guid>
      <description>&amp;lt;h2&amp;gt;java 실행파일 경로 설정하기&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;-vm
c:/Java/jdk-12.0.2/bin/javaw.exe
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;utf-8을 기본으로 사용하기&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;-Dfile.encoding=utf-8
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;클래스 주석 생성시에 @author의 기본값 변경하기.&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;-Duser.name=&amp;amp;quot;TtalLaeMiDeul&amp;amp;quot;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;아래와 같이 주석 생성시에 @author값에 삽입된다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-java&amp;quot;&amp;gt;/**
 * h2database mybatis 설정
 * @author TtalLaeMiDeul
 *
 */
 public class DbH2DatabaseConfig {
 }
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
</description>
    </item><item>
      <title>Google 애널리틱스 사용</title>
      <link>https://appaga.kr/blog/google/gtag001.html</link>
      <pubDate>Sun, 23 Feb 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/google/gtag001.html</guid>
      <description>&amp;lt;h2&amp;gt;애널리틱스 계정 만들기&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://analytics.google.com/&amp;quot;&amp;gt;https://analytics.google.com&amp;lt;/a&amp;gt; 에서 진행한다.&amp;lt;/p&amp;gt;
&amp;lt;ol&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;code&amp;gt;ttallaemideul&amp;lt;/code&amp;gt; 이름으로 계정생성 하였다.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;측정하려는 대상은 &amp;lt;code&amp;gt;웹&amp;lt;/code&amp;gt;을 선택하였다.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;내 사이트 &amp;lt;code&amp;gt;https://ttallaemideul.github.io/&amp;lt;/code&amp;gt;로 나머지 속성을 설정하였다.&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/google/google-001-01.png&amp;quot; alt=&amp;quot;구글 애널리틱스 계정 만들기&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;생성된 계정 정보에서 &amp;lt;code&amp;gt;관리 &amp;amp;gt; 추정 정보 &amp;amp;gt; 추적 코드&amp;lt;/code&amp;gt;에서 &amp;lt;code&amp;gt;추척ID&amp;lt;/code&amp;gt; 값을 확인할 수 있다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;또한, 사이트에 추가해야 할 자바스브립트 코드도 확인 가능하다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;필터 추가&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;관리 &amp;amp;gt; 모든필터 &amp;amp;gt; 필터추가&amp;lt;/code&amp;gt;를 이용하여 제외할 요청을 설정할 수 있다.&amp;lt;br /&amp;gt;
자시의 컴퓨터에서 요청은 통계에서 제외할 수 있도록 설정이 가능하다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/google/google-001-02.png&amp;quot; alt=&amp;quot;필터추가&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
</description>
    </item><item>
      <title>ubuntu 18.04 dock에 프로그램 등록하기</title>
      <link>https://appaga.kr/blog/linux/ubuntu_002.html</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/linux/ubuntu_002.html</guid>
      <description>&amp;lt;p&amp;gt;새로 설치한 우분투의 데스크탑 독에 프로그램을 등록하고자 한다.&amp;lt;br /&amp;gt;
등록할 것은 스프링 툴 sts-4.5.1 이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;스프링 툴 압축 푼 것은 아래처럼 폴더에 위치해 있다.&amp;lt;br /&amp;gt;
SpringToolSuite4가 실행파일이고  icon.xpm이 아이콘 파일이다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-console&amp;quot;&amp;gt;kyin@kyin:~/dev/sts-4.5.1.RELEASE$ pwd 
/home/kyin/dev/sts-4.5.1.RELEASE 

kyin@kyin:~/dev/sts-4.5.1.RELEASE$ ls 
META-INF 
...
SpringToolSuite4 
icon.xpm
...
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;프로그램 실행 아이콘을 만들기 위해 자신의 홈디렉토리 아래 &amp;lt;code&amp;gt;~/.local/share/applications&amp;lt;/code&amp;gt; 폴더에&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;.desktop&amp;lt;/code&amp;gt; 파일을 만든다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;나의 경우는 &amp;lt;code&amp;gt;sts.desktop&amp;lt;/code&amp;gt;으로 만들었다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ cd ~/.local/share/applications/
$ vi sts.desktop

[Desktop Entry]
Name=sts-4.5.1.RELEASE
Exec=/home/kyin/dev/sts-4.5.1.RELEASE/SpringToolSuite4
Comment=Sprint Tool Suite 4.5.1
Terminal=false
Type=Application
Icon=/home/kyin/dev/sts-4.5.1.RELEASE/icon.xpm
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;sts.desktop&amp;lt;/code&amp;gt; 파일을 생성 후에 프로그램 목록을 열어보면 추가한 스프링툴 아이콘이 표시될 것이고&amp;lt;br /&amp;gt;
우클릭하여 &amp;lt;code&amp;gt;즐겨찾기에 추가&amp;lt;/code&amp;gt;를 선택해주면 독에 아이콘이 생성된다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/linux/ubuntu/ubuntu-003-01.png&amp;quot; alt=&amp;quot;즐겨찾기에 추가 하기&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
</description>
    </item><item>
      <title>우분투 데스크탑 버전 설치 후 서버용 프로그램 설치하기</title>
      <link>https://appaga.kr/blog/linux/ubuntu_001.html</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/linux/ubuntu_001.html</guid>
      <description>&amp;lt;p&amp;gt;우분투 데스크탑 버전(18.04.4 LTS) 설치 후 서버용 프로그램 설치하면서 정리한 내용이다.&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;ssh 설지&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;apt-get&amp;lt;/code&amp;gt;으로 설치하고 &amp;lt;code&amp;gt;systemctl&amp;lt;/code&amp;gt;로 시작한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ sudo apt-get update
$ sudo apt-get install openssh-server
$ sudo systemctl enable ssh
$ sudo systemctl start ssh
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h2&amp;gt;svn 설치&amp;lt;/h2&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ sudo apt-get install subversion
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;어떤 파일들이 설치되었는지 확인하고 싶을 때는 다음 명령으로 가능하다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$ sudo dpkg -L subversion
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;h3&amp;gt;svn 전용 계정을 생성하여 사용하도록 한다.&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;/etc/passwd&amp;lt;/code&amp;gt;에서 &amp;lt;code&amp;gt;shell&amp;lt;/code&amp;gt;은 &amp;lt;code&amp;gt;nologin&amp;lt;/code&amp;gt;으로 하였다.&amp;lt;/p&amp;gt;
&amp;lt;blockquote&amp;gt;
&amp;lt;p&amp;gt;svn:x:1001:1001::/home/svn:/usr/sbin/nologin&amp;lt;/p&amp;gt;
&amp;lt;/blockquote&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-console&amp;quot;&amp;gt;$ sudo useradd svn
$ cd /home
$ sudo mkdir svn
$ sudo chown svn.svn svn
$ cd /home/svn
$ sudo -u svn svnadmin create myrepos
$ cd myrepos
$ ll
drwxr-xr-x 6 svn svn 4096  2월 16 20:40 ./
drwxr-xr-x 3 svn svn 4096  2월 16 20:40 ../
-rw-r--r-- 1 svn svn  246  2월 16 20:40 README.txt
drwxr-xr-x 2 svn svn 4096  2월 16 20:40 conf/
drwxr-sr-x 6 svn svn 4096  2월 16 20:40 db/
-r--r--r-- 1 svn svn    2  2월 16 20:40 format
drwxr-xr-x 2 svn svn 4096  2월 16 20:40 hooks/
drwxr-xr-x 2 svn svn 4096  2월 16 20:40 locks/
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/linux/ubuntu/ubuntu-002-01.png&amp;quot; alt=&amp;quot;myrepos&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;서비스로 등록&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;서버가 재부팅 되어도 자동으로 svn이 실행되도록 &amp;lt;code&amp;gt;systemctl&amp;lt;/code&amp;gt;에 서비스로 등록한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-console&amp;quot;&amp;gt;$ cd /etc/systemd/system
$ sudo vi svnserve.service
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;svnserve.service&amp;lt;/code&amp;gt; 파일의 내용은 아래와 같다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;[Unit]
Description=Subversion daemon
After=syslog.target network.target

[Service]
Type=forking
RuntimeDirectory=svnserve
PIDFile=/run/svnserve/svnserve.pid
ExecStart=/usr/bin/svnserve --daemon \
        --pid-file /run/svnserve/svnserve.pid \
        --log-file /home/svn/log/logs.log \
        -r /home/svn 
User=svn
Group=svn
KillMode=control-group
Restart=on-failure

[Install]
WantedBy=multi-user.target
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;code&amp;gt;root&amp;lt;/code&amp;gt; 권한으로 &amp;lt;code&amp;gt;/run/svnserve&amp;lt;/code&amp;gt; 디렉토리를 생성하고,&amp;lt;br /&amp;gt;
&amp;lt;code&amp;gt;svn&amp;lt;/code&amp;gt; 권한으로 &amp;lt;code&amp;gt;/home/svn/log&amp;lt;/code&amp;gt; 디렉토리를 생성한다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;svnserve 서비스를 등록한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-console&amp;quot;&amp;gt;$ sudo systemctl enable svnserve
$ sudo systemctl start svnserve
$ sudo systemctl status svnserve

kyin@kyin:/home/svn$ sudo systemctl status svnserve
● svnserve.service - Subversion daemon
   Loaded: loaded (/etc/systemd/system/svnserve.service; enabled; vendor preset:
   Active: active (running) since Sun 2020-02-16 21:15:45 KST; 6min ago
  Process: 12224 ExecStart=/usr/bin/svnserve --daemon --pid-file /run/svnserve/s
 Main PID: 12225 (svnserve)
    Tasks: 1 (limit: 4560)
   CGroup: /system.slice/svnserve.service
           └─12225 /usr/bin/svnserve --daemon --pid-file /run/svnserve/svnserve.

 2월 16 21:15:45 kyin systemd[1]: Starting Subversion daemon...
 2월 16 21:15:45 kyin svnserve[12224]: DIGEST-MD5 common mech free
 2월 16 21:15:45 kyin systemd[1]: Started Subversion daemon.
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;/img/linux/ubuntu/ubuntu-002-02.png&amp;quot; alt=&amp;quot;systemctl status svnserve&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;h2&amp;gt;java 설치&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;openjdk를 설치한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code class=&amp;quot;prettyprint language-console&amp;quot;&amp;gt;$ sudo apt-get install openjdk-8-jdk
$ java -version
openjdk version &amp;amp;quot;1.8.0_242&amp;amp;quot;
OpenJDK Runtime Environment (build 1.8.0_242-8u242-b08-0ubuntu3~18.04-b08)
OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
</description>
    </item><item>
      <title>CentOS 8 고정 IP 사용</title>
      <link>https://appaga.kr/blog/linux/centos001.html</link>
      <pubDate>Sat, 22 Feb 2020 00:00:00 +0900</pubDate>
      <guid isPermaLink="false">blog/linux/centos001.html</guid>
      <description>&amp;lt;p&amp;gt;네트워크 설정 파일(나의 경우는 ifcfg-ens33)을 설정한다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;[root@chlee chlee]# cat /etc/sysconfig/network-scripts/ifcfg-ens33 
TYPE=&amp;amp;quot;Ethernet&amp;amp;quot; 
PROXY_METHOD=&amp;amp;quot;none&amp;amp;quot; 
BROWSER_ONLY=&amp;amp;quot;no&amp;amp;quot; 
BOOTPROTO=&amp;amp;quot;none&amp;amp;quot; 
DEFROUTE=&amp;amp;quot;yes&amp;amp;quot; 
IPV4_FAILURE_FATAL=&amp;amp;quot;no&amp;amp;quot; 
IPV6INIT=&amp;amp;quot;yes&amp;amp;quot; 
IPV6_AUTOCONF=&amp;amp;quot;yes&amp;amp;quot; 
IPV6_DEFROUTE=&amp;amp;quot;yes&amp;amp;quot; 
IPV6_FAILURE_FATAL=&amp;amp;quot;no&amp;amp;quot; 
IPV6_ADDR_GEN_MODE=&amp;amp;quot;stable-privacy&amp;amp;quot; 
NAME=&amp;amp;quot;ens33&amp;amp;quot; 
UUID=&amp;amp;quot;76ba719a-8ad7-4ebb-893f-51b5cfba5a3b&amp;amp;quot; 
DEVICE=&amp;amp;quot;ens33&amp;amp;quot; 
ONBOOT=&amp;amp;quot;yes&amp;amp;quot; 
IPADDR=&amp;amp;quot;192.168.137.100&amp;amp;quot; 
PREFIX=&amp;amp;quot;24&amp;amp;quot; 
GATEWAY=&amp;amp;quot;192.168.137.1&amp;amp;quot; 
IPV6_PRIVACY=&amp;amp;quot;no&amp;amp;quot; 
DNS1=&amp;amp;quot;192.168.137.1&amp;amp;quot;
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;p&amp;gt;192.168.137.1 ip가 게이트웨이이고 가상 어댑터에 설정된 ip이다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;WiFi 어댑터에서 네트워크를 공유하도록 설정하고 가상 어댑터와 공유하도록 선택해준다.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;systemctl 로 네트워크 서비스를 재기동 해준다.&amp;lt;/p&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;[root@chlee chlee]# systemctl restart Networkmanager
&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
</description>
    </item>

  </channel>
</rss>
